// ======= Copyright (c) 2003-2012, Unknown Worlds Entertainment, Inc. All rights reserved. =======
//
// lua\Avatar.lua
//
//    Created by:   Andy 'Soul Rider' Wilson for Proving Grounds
//
// ========= For more information, visit us at http://www.unknownworlds.com =====================

Script.Load("lua/Player.lua")
Script.Load("lua/Mixins/BaseMoveMixin.lua")
Script.Load("lua/Mixins/GroundMoveMixin.lua")
Script.Load("lua/Mixins/JumpMoveMixin.lua")
Script.Load("lua/Mixins/CameraHolderMixin.lua")
Script.Load("lua/ScoringMixin.lua")
Script.Load("lua/UnitStatusMixin.lua")
Script.Load("lua/DissolveMixin.lua")
Script.Load("lua/LOSMixin.lua")
Script.Load("lua/CombatMixin.lua")
Script.Load("lua/RagdollMixin.lua")
Script.Load("lua/Weapons/PredictedProjectile.lua")
Script.Load("lua/AvatarVariantMixin.lua")


if Client then
    Script.Load("lua/TeamMessageMixin.lua")
end

class 'Avatar' (Player)

Avatar.kMapName = "avatar"

if Server then
    Script.Load("lua/Avatar_Server.lua")
elseif Client then
    Script.Load("lua/Avatar_Client.lua")
end

Shared.PrecacheSurfaceShader("models/marine/marine.surface_shader")
Shared.PrecacheSurfaceShader("models/marine/marine_noemissive.surface_shader")

Avatar.kFlashlightSoundName = PrecacheAsset("sound/NS2.fev/common/light")
Avatar.kChatSound = PrecacheAsset("sound/NS2.fev/marine/common/chat")

Avatar.kEffectNode = "fxnode_playereffect"
Avatar.kHealth = kAvatarHealth
Avatar.kBaseArmor = kAvatarArmor
Avatar.kMaxSprintFov = 95

Avatar.kWalkMaxSpeed = 6.5                // Four miles an hour = 6,437 meters/hour = 1.8 meters/second (increase for FPS tastes)

Avatar.kWalkBackwardSpeedScalar = 1
// tracked per techId
Avatar.kAvatarAlertTimeout = 4

Avatar.kAcceleration = 100

Avatar.kGroundFrictionForce = 16

Avatar.kAirStrafeWeight = 1

local networkVars =
{      


    catpackboost = "private boolean",
    timeCatpackboost = "private time",
        
    strafeJumped = "private compensated boolean",
    
}

AddMixinNetworkVars(BaseMoveMixin, networkVars)
AddMixinNetworkVars(GroundMoveMixin, networkVars)
AddMixinNetworkVars(JumpMoveMixin, networkVars)
AddMixinNetworkVars(CameraHolderMixin, networkVars)
AddMixinNetworkVars(DissolveMixin, networkVars)
AddMixinNetworkVars(LOSMixin, networkVars)
AddMixinNetworkVars(CombatMixin, networkVars)
AddMixinNetworkVars(ScoringMixin, networkVars)
AddMixinNetworkVars(AvatarVariantMixin, networkVars)

function Avatar:OnCreate()

    InitMixin(self, BaseMoveMixin, { kGravity = Player.kGravity })
    InitMixin(self, GroundMoveMixin)
    InitMixin(self, JumpMoveMixin)
    InitMixin(self, CameraHolderMixin, { kFov = kDefaultFov })
    InitMixin(self, ScoringMixin, { kMaxScore = kMaxScore })
    InitMixin(self, CombatMixin)
    
    Player.OnCreate(self)
    
    InitMixin(self, DissolveMixin)
    InitMixin(self, LOSMixin)
    InitMixin(self, RagdollMixin)
    InitMixin(self, PredictedProjectileShooterMixin)
    InitMixin(self, AvatarVariantMixin)

    
end

function Avatar:OnInitialized()
    
    Player.OnInitialized(self)
        
    // Calculate max and starting armor differently
    self.armor = 0
    
    if Server then
    
        self.armor = self:GetArmorAmount()
        self.maxArmor = self.armor
    end
    
    local viewAngles = self:GetViewAngles()
    self.lastYaw = viewAngles.yaw
    self.lastPitch = viewAngles.pitch
    
    // -1 = leftmost, +1 = right-most
    self.horizontalSwing = 0
    // -1 = up, +1 = down
    

    self.catpackboost = false
    self.timeCatpackboost = 0

end

local blockBlackArmor = false
if Server then
    Event.Hook("Console_blockblackarmor", function() if Shared.GetCheatsEnabled() then blockBlackArmor = not blockBlackArmor end end)
end

function Avatar:GetArmorLevel()

    local armorLevel = 0
    return armorLevel

end

function Avatar:GetWeaponLevel()

    local weaponLevel = 0
    return weaponLevel

end

function Avatar:GetSlowOnLand()
    return false
end

function Avatar:GetArmorAmount()
    return Avatar.kBaseArmor  
end

function Avatar:OnDestroy()

    Player.OnDestroy(self)
    
end

function Avatar:HandleButtons(input)

    PROFILE("Avatar:HandleButtons")
    
    Player.HandleButtons(self, input)
    
    if self:GetCanControl() then
            
        
    end
    
end

function Avatar:ModifyGroundFraction(groundFraction)
    return groundFraction > 0 and 1 or 0
end

function Avatar:GetMaxSpeed(possible)

    if possible then
        return Avatar.kWalkMaxSpeed
    end
    
    local maxSpeed = Avatar.kWalkMaxSpeed
    
    if self.catpackboost then
        maxSpeed = maxSpeed + kCatPackMoveAddSpeed
    end
    
    return maxSpeed 
    
end

function Avatar:GetFootstepSpeedScalar()
    return Clamp(self:GetVelocityLength() / (Avatar.kWalkMaxSpeed * self:GetCatalystMoveSpeedModifier()), 0, 1)
end

// Maximum speed a player can move backwards
function Avatar:GetMaxBackwardSpeedScalar()
    return Avatar.kWalkBackwardSpeedScalar
end

function Avatar:GetPlayerControllersGroup()
    return PhysicsGroup.BigPlayerControllersGroup
end

function Avatar:GetJumpHeight()
    return Player.kJumpHeight
end

// Returns -1 to 1
function Avatar:GetWeaponSwing()
    return self.horizontalSwing
end

function Avatar:GetWeaponDropTime()
    return self.weaponDropTime
end

function Avatar:GetChatSound()
    return Avatar.kChatSound
end

function Avatar:GetDeathMapName()
    return MarineSpectator.kMapName
end

// Returns the name of the primary weapon
function Avatar:GetPlayerStatusDesc()

    local status = kPlayerStatus.Void
    
    if (self:GetIsAlive() == false) then
        return kPlayerStatus.Dead
    end
    
    local weapon = self:GetActiveWeapon()
    if (weapon) then
        if (weapon:isa("GrenadeLauncher")) then
            return kPlayerStatus.GrenadeLauncher
        elseif (weapon:isa("Rifle")) then
            return kPlayerStatus.Rifle
        elseif (weapon:isa("Shotgun")) then
            return kPlayerStatus.Shotgun
        elseif (weapon:isa("Flamethrower")) then
            return kPlayerStatus.Flamethrower
        end
    end
    
    return status
end

function Avatar:GetCanDropWeapon(weapon, ignoreDropTimeLimit)
   
    return false
    
end

function Avatar:GetCanUseCatPack()

    local enoughTimePassed = self.timeCatpackboost + 6 < Shared.GetTime()
    return not self.catpackboost or enoughTimePassed
    
end

function Avatar:GetCanChangeViewAngles()
    return true
end    

function Avatar:OnUseTarget(target)

end

function Avatar:OnUseEnd() 

end

function Avatar:OnUpdateAnimationInput(modelMixin)

    PROFILE("Avatar:OnUpdateAnimationInput")
    
    Player.OnUpdateAnimationInput(self, modelMixin)
        
    local catalystSpeed = 1
    if self.catpackboost then
        catalystSpeed = kCatPackWeaponSpeed
    end

    modelMixin:SetAnimationInput("catalyst_speed", catalystSpeed)
    
end

function Avatar:GetDeflectMove()
    return true
end    

local kStrafeJumpForce = 1
local kStrafeJumpDelay = 0.7
function Avatar:ModifyJump(input, velocity, jumpVelocity)
    
    local isStrafeJump = input.move.z == 0 and input.move.x ~= 0
    if isStrafeJump and self:GetTimeGroundTouched() + kStrafeJumpDelay < Shared.GetTime() then
    
        local strafeJumpDirection = GetNormalizedVector(self:GetViewCoords():TransformVector(input.move))
        jumpVelocity:Add(strafeJumpDirection * kStrafeJumpForce)
        jumpVelocity.y = jumpVelocity.y * 0.8
        self.strafeJumped = true
        
    else
        self.strafeJumped = false
    end
    
    jumpVelocity:Scale(self:GetSlowSpeedModifier())
    
end

function Avatar:OnJump()

    if self.strafeJumped then
        self:TriggerEffects("strafe_jump", {surface = self:GetMaterialBelowPlayer()})           
    end

    self:TriggerEffects("jump", {surface = self:GetMaterialBelowPlayer()})
    
end    

function Avatar:OnProcessMove(input)

    if self.catpackboost then
        self.catpackboost = Shared.GetTime() - self.timeCatpackboost < kCatPackDuration
    end
    
    Player.OnProcessMove(self, input)
    
end

function Avatar:GetHasCatpackBoost()
    return self.catpackboost
end

Shared.LinkClassToMap("Avatar", Avatar.kMapName, networkVars, true)
